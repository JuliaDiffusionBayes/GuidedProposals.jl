var documenterSearchIndex = {"docs":
[{"location":"module_index/#Index-1","page":"Index","title":"Index","text":"","category":"section"},{"location":"module_index/#","page":"Index","title":"Index","text":"","category":"page"},{"location":"module_index/#","page":"Index","title":"Index","text":"Modules = [GuidedProposals]","category":"page"},{"location":"module_index/#GuidedProposals.F-Tuple{GuidProp,Any}","page":"Index","title":"GuidedProposals.F","text":"F(P::GuidProp, i)\n\nReturn saved vector Fi.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.F-Tuple{GuidedProposals.HFcSolver,Integer}","page":"Index","title":"GuidedProposals.F","text":"F(s::HFcSolver, i::Integer)\n\nReturn saved vector Fi.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.H-Tuple{GuidProp,Any}","page":"Index","title":"GuidedProposals.H","text":"H(P::GuidProp, i)\n\nReturn saved matrix Hi.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.H-Tuple{GuidedProposals.HFcSolver,Integer}","page":"Index","title":"GuidedProposals.H","text":"H(s::HFcSolver, i::Integer)\n\nReturn saved matrix Hi.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.build_guid_prop-Tuple{AbstractArray,NamedTuple,Array{T,1} where T,Any}","page":"Index","title":"GuidedProposals.build_guid_prop","text":"build_guid_prop(\n    aux_laws::AbstractArray, recording::NamedTuple, tts::Vector, args\n)\n\nSame as a version with ::Type{AuxLaw}, but aux_laws is a list of auxiliary laws that correspond to each inter-observation interval.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.build_guid_prop-Union{Tuple{AuxLaw}, Tuple{Type{AuxLaw},NamedTuple,Array{T,1} where T,Vararg{Any,N} where N}} where AuxLaw<:DiffusionDefinition.DiffusionProcess","page":"Index","title":"GuidedProposals.build_guid_prop","text":"build_guid_prop(\n    ::Type{AuxLaw}, recording::NamedTuple, tts::Vector, args...\n) where {AuxLaw <: DD.DiffusionProcess}\n\nInitialize multiple instances of GuidProp corresponding to guided proposals for observations stored in recording. The time grids for each inter-observation interval is given in tts and AuxLaw is the auxiliary law for creating guided proposals. args... are passed to each constructor of GuidProp.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.c-Tuple{GuidProp,Any}","page":"Index","title":"GuidedProposals.c","text":"c(P::GuidProp, i)\n\nReturn saved scalar ci.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.c-Tuple{GuidedProposals.HFcSolver,Integer}","page":"Index","title":"GuidedProposals.c","text":"c(s::HFcSolver, i::Integer)\n\nReturn saved scalar ci.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.loglikhd_obs-Tuple{GuidProp,Any}","page":"Index","title":"GuidedProposals.loglikhd_obs","text":"loglikhd_obs(P::GuidProp, x0)\n\nCompute the contribution of end-points to the log-likelihood function, i.e.: logrho(tx).\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.recompute_guiding_term!","page":"Index","title":"GuidedProposals.recompute_guiding_term!","text":"recompute_guiding_term!(P::GuidProp, next_guided_prop=nothing)\n\nRecompute the guiding term (most often used after update of parameters or change of an observation). next_guided_prop is the guided proposal law from the subsequent interval\n\n\n\n\n\n","category":"function"},{"location":"module_index/#GuidedProposals.recompute_guiding_term!-Tuple{AbstractArray{#s18,N} where N where #s18<:GuidProp}","page":"Index","title":"GuidedProposals.recompute_guiding_term!","text":"recompute_guiding_term!(PP::Vector{<:GuidProp})\n\nRecompute the guiding term for the entire trajectory with all observations (most often used after update of parameters or change of an observation).\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.AbstractGuidingTermSolver","page":"Index","title":"GuidedProposals.AbstractGuidingTermSolver","text":"AbstractGuidingTermSolver{Tmode}\n\nSupertype for ODE solvers (solving H,F,c system or M,L,μ system or P,ν system). Tmode is a flag for whether computations are done in-place (with states represented by vectors), out-of-place (with state represented by StaticArrays), or on GPUs (with states represented by cuArrays).\n\n\n\n\n\n","category":"type"},{"location":"module_index/#GuidedProposals.HFcBuffer","page":"Index","title":"GuidedProposals.HFcBuffer","text":"struct HFcBuffer{\n        T,D,TB,Tβ,Tσ,Ta,Tmat,Tvec\n        } <: DiffusionDefinition.AbstractBuffer{T}\n    data::Vector{T}\n    B::TB\n    β::Tβ\n    σ::Tσ\n    a::Ta\n    mat::Tmat\n    vec::Tvec\nend\n\nA buffer for temporary computations of in-place ODE solvers solving for H,F,c system.\n\n\n\n\n\n","category":"type"},{"location":"module_index/#GuidedProposals.HFcContainer","page":"Index","title":"GuidedProposals.HFcContainer","text":"struct HFcContainer{T,D,TH,TF,Tc} <: AbstractBuffer{T}\n    data::Vector{T}\n    H::TH\n    F::TF\n    c::Tc\nend\n\nA buffer containing data for in-place computations of H,F,c terms.\n\n\n\n\n\n","category":"type"},{"location":"module_index/#GuidedProposals.HFcSolver","page":"Index","title":"GuidedProposals.HFcSolver","text":"struct HFcSolver{Tmode,Tsv,Tps,Tcb,Ts,T,Ta} <: AbstractGuidingTermSolver{Tmode}\n    saved_values::Tsv\n    problem_setup::Tps\n    callback::Tcb\n    solver::Ts\n    HFc0::T\n    access::Ta\nend\n\nStruct for solving a (H,F,c)-system of ODEs.\n\n    HFcSolver(\n        ::Val{:inplace},\n        tt,\n        xT_plus,\n        P,\n        obs,\n        choices,\n    )\nConstructor for an ODE solver with in-place operations. Pre-allocates space\nand solves a (H,F,c)-system of ODEs once, backward in time on the interval\n`(tt[1], tt[end])`, with a terminal condition computed from `xT_plus`. `P`\nis the auxiliary diffusion law, `obs` is the observation made at time\n`tt[end]` and `choices` contains information about eltype and the algorithm\nfor solving ODEs. H,F,c are saved on a grid of time-points `tt`.\n\n    HFcSolver(\n        ::Val{:outofplace},\n        tt,\n        xT_plus,\n        P,\n        obs,\n        choices\n    )\nConstructor for an ODE solver with out-of-place operations using\nStaticArrays. Initialises the object and solves a (H,F,c)-system of ODEs\nonce, backward in time on the interval `(tt[1], tt[end])`, with a terminal\ncondition computed from `xT_plus`. `P` is the auxiliary diffusion law, `obs`\nis the observation made at time `tt[end]` and `choices` contains information\nabout eltype and the algorithm for solving ODEs. H,F,c are saved on a grid\nof time-points `tt`.\n\n\n\n\n\n","category":"type"},{"location":"module_index/#GuidedProposals.IntegrationRule","page":"Index","title":"GuidedProposals.IntegrationRule","text":"IntegrationRule\n\nSupertype of all integration rules. In this package we currently approximate the integrals by step functions with evaluations at the left side of the intervals.\n\n\n\n\n\n","category":"type"},{"location":"module_index/#GuidedProposals.LeftRule","page":"Index","title":"GuidedProposals.LeftRule","text":"LeftRule <: IntegrationRule\n\nIntegration rule flag, indicating to approximate functions with step functions with height equal to function evaluation at the left side of the intevals.\n\n\n\n\n\n","category":"type"},{"location":"module_index/#Base.Libc.time-Tuple{GuidProp,Any}","page":"Index","title":"Base.Libc.time","text":"Base.time(P::GuidProp, i)\n\nReturn time-point tt[i] corresponding to a saved state of ODEs (with tt[1] indicating time 0+ and tt[end] indicating time T).\n\n\n\n\n\n","category":"method"},{"location":"module_index/#Base.rand","page":"Index","title":"Base.rand","text":"Base.rand(\n    [rng::Random.AbstractRNG], P::GuidProp, y1=zero(P); f=DD.__DEFAULT_F\n)\n\nSample a trajectory of a guided proposal P started from y1. Initialize containers in the background and compute the functional f at the time of sampling.\n\n\n\n\n\n","category":"function"},{"location":"module_index/#Base.rand","page":"Index","title":"Base.rand","text":"Base.rand(\n    [rng::Random.AbstractRNG],\n    PP::AbstractArray{<:GuidProp}, y1=zero(PP[1]); f=DD.__DEFAULT_F\n)\n\nSample a trajectory started from y1, defined for multiple guided proposals PP that correspond to consecutive intervals. Initialize containers in the background and compute the functionals f (one for each interval) at the time of sampling.\n\n\n\n\n\n","category":"function"},{"location":"module_index/#DiffusionDefinition.dimension-Tuple{GuidProp}","page":"Index","title":"DiffusionDefinition.dimension","text":"DD.dimension(P::GuidProp)\n\nDimension of the stochastic process and the driving Brownian motion (by default the same as that of the target process)\n\n\n\n\n\n","category":"method"},{"location":"module_index/#DiffusionDefinition.same_entries-Tuple{AbstractArray{#s24,N} where N where #s24<:GuidProp,AbstractArray{#s20,N} where N where #s20<:GuidProp,Any}","page":"Index","title":"DiffusionDefinition.same_entries","text":"DD.same_entries(\n    PP::AbstractArray{<:GuidProp},\n    PP°::AbstractArray{<:GuidProp},\n    entries\n)\n\nGo through the collections of guided proposals PP and PP° and compare if they share the same values of fields listed in entries.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#DiffusionDefinition.set_parameters!","page":"Index","title":"DiffusionDefinition.set_parameters!","text":"DD.set_parameters!(\n    PP::AbstractArray{<:GuidProp},\n    PP°::AbstractArray{<:GuidProp},\n    θ°,\n    var_p_names,\n    var_p_aux_names,\n    θ_local_names,\n    θ_local_aux_names,\n    θ_local_obs_ind,\n    critical_change = is_critical_update(\n        PP, θ_local_aux_names, θ_local_obs_ind\n    ),\n)\n\nSet parameters of Guided proposals PP° in an MCMC setting.\n\n...\n\nArguments\n\nPP: containers indicating how PP° should look like before θ° update\nθ°: a vector with new parameters to be potentially set inside PP°\nvar_p_names: list of all variable parameter names in PP\nvar_p_aux_names: list of all variable parameter names of auxiliary laws in\n\nPP\n\nθ_local_names: list of pairs with relevant θ° entries for the target law\n\nin a format (idx-of-param-in-θ°::Int64, param-name-in-law::Symbol)\n\nθ_local_aux_names: list of pairs with relevant θ° entries for the aux law\n\nin a format (idx-of-param-in-θ°::Int64, param-name-in-law::Symbol)\n\nθ_local_obs_ind: list of pairs with relevant θ° entries for the\n\nobservations in a format (idx-of-param-in-θ°::Int64, idx-in-obs::Int64)\n\ncritical_change: boolean for whether θ° update alters any critical\n\nparameters prompting for recomputation of the guiding term ...\n\n\n\n\n\n","category":"function"},{"location":"module_index/#DiffusionDefinition.set_parameters!-Tuple{AbstractArray{#s24,N} where N where #s24<:GuidProp,Any,Any,Any,Any}","page":"Index","title":"DiffusionDefinition.set_parameters!","text":"DD.set_parameters!(\n    PP::AbstractArray{<:GuidProp},\n    θ°,\n    θ_local_names,\n    θ_local_aux_names,\n    θ_local_obs_ind\n)\n\nGo throught the collection of GuidProps in PP and set the new parameters θ° in relevant fields. θ_local_names lists which fields in the target law need changing. θ_local_aux_names lists the same for the auxiliary laws and θ_local_obs_ind for the observations.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#DiffusionDefinition.set_parameters!-Tuple{AbstractArray{#s24,N} where N where #s24<:GuidProp,Dict}","page":"Index","title":"DiffusionDefinition.set_parameters!","text":"DD.set_parameters!(PP::AbstractArray{<:GuidProp}, θ°::Dict)\n\nConvenience parameter setter\n\n\n\n\n\n","category":"method"},{"location":"module_index/#DiffusionDefinition.set_parameters!-Tuple{GuidProp,Any,Any,Any,Any}","page":"Index","title":"DiffusionDefinition.set_parameters!","text":"DD.set_parameters!(\n    P::GuidProp,\n    θ°,\n    θ_local_names,\n    θ_local_aux_names,\n    θ_local_obs_ind\n)\n\nSet the new parameters θ° in P. θ_local_names lists which fields in the target law need changing. θ_local_aux_names lists the same for the auxiliary law and θ_local_obs_ind for the observation.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#DiffusionDefinition.set_parameters!-Tuple{GuidProp,Dict}","page":"Index","title":"DiffusionDefinition.set_parameters!","text":"DD.set_parameters!(P::GuidProp, θ°::Dict)\n\nConvenience parameter setter\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.HFc0-Tuple{GuidProp}","page":"Index","title":"GuidedProposals.HFc0","text":"HFc0(P::GuidProp)\n\nReturn the container with data that can be used to reconstruct H,F,c evaluated at time 0+ for the guided proposal P.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.HFc0-Tuple{GuidedProposals.HFcSolver}","page":"Index","title":"GuidedProposals.HFc0","text":"HFc0(s::HFcSolver)\n\nReturn the data containing H,F,c terms for the time 0+\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.equalize_law_params!-Tuple{AbstractArray{#s20,N} where N where #s20<:GuidProp,AbstractArray{#s19,N} where N where #s19<:GuidProp,Any,Any}","page":"Index","title":"GuidedProposals.equalize_law_params!","text":"equalize_law_params!(\n    PP::AbstractArray{<:GuidProp},\n    PP°::AbstractArray{<:GuidProp},\n    var_p_names,\n    var_p_aux_names,\n)\n\nGo through two collections of GuidProp and compare their variable parameters. If any of the parameters in PP° ends up being different than in PP then equalize them and if any of them belongs to the auxiliary law then return a critical_change flag.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.equalize_obs_params!-Tuple{AbstractArray{#s20,N} where N where #s20<:GuidProp,AbstractArray{#s19,N} where N where #s19<:GuidProp}","page":"Index","title":"GuidedProposals.equalize_obs_params!","text":"equalize_obs_params!(\n    PP::AbstractArray{<:GuidProp},\n    PP°::AbstractArray{<:GuidProp}\n)\n\nGo through a collection of GuidProp in PP° and make sure that all observation parameters are the same. If not, equalize them and return a critical_change flag indicating that GuidProp laws need to be recomputed.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.fetch_eltype-Tuple{Any,Any}","page":"Index","title":"GuidedProposals.fetch_eltype","text":"fetch_eltype(choices, P)\n\nDetermine the type of the elements that is supposed to be used by the internal containers of this package. If choice.gradients flag is turned on, then use the same type as the eltypes of the parameters in the auxiliary law. Otherwise, use the type specified in choice. If neither the choice.gradients flag is on, nor a default is provided, use Float64.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.fetch_xT_plus","page":"Index","title":"GuidedProposals.fetch_xT_plus","text":"fetch_xT_plus(::Val{:inplace}, next_guided_prop, el, dim_of_proc)\n\nIf this is not the last inter-observation interval, fetch the data containing H,F,c computed for the left time-limit of the subsequent interval. Otherwise, instantiate a zero-term.\n\n\n\n\n\n","category":"function"},{"location":"module_index/#GuidedProposals.get_or_default-Tuple{Any,Symbol,Any}","page":"Index","title":"GuidedProposals.get_or_default","text":"get_or_default(container, elem::Symbol, default)\n\nReturn container.elem if it exists, otherwise return default\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.init_solver-Tuple{Val{:hfc},Any,Any,Any,Any,Val,Any,Any}","page":"Index","title":"GuidedProposals.init_solver","text":"init_solver(\n    ::Val{:hfc},\n    ::Any,\n    tt,\n    P_aux,\n    obs,\n    mode::Val,\n    choices,\n    next_guided_prop\n)\n\nInitialise ODE solver for H,F,c, preallocate space and solve it once. tt is the time-grid on which ∇logρ is to be saved. P_aux is the auxiliary law, obs is the terminal observation, mode is for differentiating between in-place, out-of-place and gpu constructors for the guiding term solver, choices contains additional information that is passed on (and which is about eltype and a chosen algorithm for the ODE solvers) and finally, next_guided_prop is the guided proposal used on the subsequent inter-observation interval.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.is_critical_update-Tuple{AbstractArray{#s24,N} where N where #s24<:GuidProp,Any,Any}","page":"Index","title":"GuidedProposals.is_critical_update","text":"is_critical_update(\n    PP::AbstractArray{<:GuidProp},\n    θ_local_aux_names,\n    θ_local_obs_ind\n)\n\nCheck if the update of parameters that updates the fields of the auxiliary law listed in θ_local_aux_names and the observations listed in θ_local_obs_ind is critical i.e. whether it prompts for recomputation of the guiding term.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.mode-Tuple{GuidProp}","page":"Index","title":"GuidedProposals.mode","text":"mode(P::GuidProp)\n\nReturn the mode of solving ODE systems (:inplace, :outofplace or :gpu) [TODO not used much, for multiple dispatch needs to return Val{mode}() instead, change  or remove].\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.outer-Tuple{Any}","page":"Index","title":"GuidedProposals.outer","text":"outer(x)\n\nCompute an outer product\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.prepare_static_saving_types-Union{Tuple{D}, Tuple{Val{:hfc},Val{D},Any}} where D","page":"Index","title":"GuidedProposals.prepare_static_saving_types","text":"prepare_static_saving_types(::Val{:hfc}, ::Val{D}, el) where D\n\nDefine data-types for H,F,c computed by out-of-place solver that are to be saved internally.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.reformat-Tuple{NamedTuple,Bool,Any}","page":"Index","title":"GuidedProposals.reformat","text":"reformat(solver_choice::NamedTuple, last_interval::Bool, P_aux)\n\nRe-format the solver_choice by splitting it into two NamedTuples and populating any missing entries with defaults. P_aux is the law of the auxiliary diffusion that is needed in case a flag for computing gradients is turned on.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.size_of_HFc_buffer-Tuple{Any}","page":"Index","title":"GuidedProposals.size_of_HFc_buffer","text":"size_of_HFc_solution(d)\n\nLength of a vector containing temporary data needed for in-place solver of H,F,c, when the underlying process has dimension d.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.size_of_HFc_solution-Tuple{Any}","page":"Index","title":"GuidedProposals.size_of_HFc_solution","text":"size_of_HFc_solution(d)\n\nCompute the size of a vector containing H,F,c elements\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.solve_and_ll!-Tuple{Any,Any,GuidProp,Any}","page":"Index","title":"GuidedProposals.solve_and_ll!","text":"solve_and_ll!(X, W, P, y1)\n\nCompute the trajectory under the law P for a given Wiener noise W and a starting point y1. Store the trajectory in XX. Compute the log-likelihood (path contribution) along the way. Return success_flag and log-likelihood. success_flag is set to false only if sampling was prematurely halted due to XX violating assumptions about state space.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.static_accessor_HFc-Union{Tuple{T}, Tuple{K}, Tuple{K,Val{T}}} where T where K<:Union{StaticArrays.MArray{Tuple{S},T,1,S} where T where S, StaticArrays.SArray{Tuple{S},T,1,S} where T where S}","page":"Index","title":"GuidedProposals.static_accessor_HFc","text":"static_accessor_HFc(u::SVector, ::Val{T}) where T\n\nAccess data stored in the container u so that it matches the shapes of H,F,c and points to the correct points in u. T is the dimension of the stochastic process.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.update_HFc!-Tuple{Any,Any,Any}","page":"Index","title":"GuidedProposals.update_HFc!","text":"update_HFc!(u_T, u_Tplus, obs, access)\n\nUpdate equations for H,F,c at the times of observations. Save the data into u_T.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#GuidedProposals.update_HFc-Tuple{Any,Any,Any}","page":"Index","title":"GuidedProposals.update_HFc","text":"update_HFc(u_Tplus, obs, access)\n\nUpdate equations for H,F,c at the times of observations.\n\n\n\n\n\n","category":"method"},{"location":"module_index/#Random.rand!","page":"Index","title":"Random.rand!","text":"Random.rand!(\n    [rng::Random.AbstractRNG]\n    PP::AbstractArray{<:GuidProp},\n    XX°, WW°, WW, ρρ, v::Val{:ll}, y1=zero(PP[1]);\n    Wnr=Wiener()\n)\n\nSample a trajectory started from y1 over multiple intervals for guided proposals PP that correspond to consecutive intervals. Use containers XX° and WW° to save the results. Use a preconditioned Crank-Nicolson scheme with memory parameters ρρ (one for each interval) and a previously sampled Wiener noise WW. Compute log-likelihood (path contribution AND end-points contribution) along the way.\n\n\n\n\n\n","category":"function"},{"location":"module_index/#Random.rand!","page":"Index","title":"Random.rand!","text":"Random.rand!(\n    [rng::Random.AbstractRNG]\n    PP::AbstractArray{<:GuidProp},\n    XX°, WW°, WW, ρρ, y1=zero(PP[1]);\n    f=DD.__DEFAULT_F, f_out=DD.__DEFAULT_F, Wnr=Wiener()\n)\n\nSample a trajectory started from y1 over multiple intervals for guided proposals PP that correspond to consecutive intervals. Use containers XX° and WW° to save the results. Use a preconditioned Crank-Nicolson scheme with memory parameters ρρ (one for each interval) and a previously sampled Wiener noise WW. Compute the functionals f (one for each interval) at the time of sampling and store the results in f_out.\n\n\n\n\n\n","category":"function"},{"location":"module_index/#Random.rand!","page":"Index","title":"Random.rand!","text":"Random.rand!(\n    [rng::Random.AbstractRNG]\n    PP::AbstractArray{<:GuidProp},\n    XX, WW, y1=zero(PP[1]);\n    f=DD.__DEFAULT_F, f_out=DD.__DEFAULT_F, Wnr=Wiener()\n)\n\nSample a trajectory started from y1 over multiple intervals for guided proposals PP that correspond to consecutive intervals. Use containers XX and WW to save the results. Compute the functionals f (one for each interval) at the time of sampling and store the results in f_out.\n\n\n\n\n\n","category":"function"},{"location":"module_index/#Random.rand!","page":"Index","title":"Random.rand!","text":"Random.rand!(\n    [rng::Random.AbstractRNG]\n    PP::AbstractArray{<:GuidProp},\n    XX, WW, v::Val{:ll}, y1=zero(PP[1]);\n    Wnr=Wiener()\n)\n\nSample a trajectory started from y1 over multiple intervals for guided proposals PP that correspond to consecutive intervals. Use containers XX° and WW° to save the results. Compute log-likelihood (path contribution AND end-points contribution) along the way.\n\n\n\n\n\n","category":"function"},{"location":"module_index/#Random.rand!","page":"Index","title":"Random.rand!","text":"Random.rand!(\n    [rng::Random.AbstractRNG],\n    P::GuidProp,\n    X°, W°, W, ρ, y1=zero(P);\n    f=DD.__DEFAULT_F, Wnr=Wiener()\n)\n\nSample a trajectory of a guided proposal P started from y1. Use containers X° and W° to save the results. Use a preconditioned Crank-Nicolson scheme with memory parameter ρ and a previously sampled Wiener noise W. Compute the functional f at the time of sampling.\n\n\n\n\n\n","category":"function"},{"location":"module_index/#Random.rand!","page":"Index","title":"Random.rand!","text":"Random.rand!(\n    [rng::Random.AbstractRNG]\n    P::GuidProp,\n    X, W, v::Val{:ll}, y1=zero(P);\n    Wnr=Wiener()\n)\n\nSample a trajectory of a guided proposal P started from y1. Use containers X and W to save the results. Compute log-likelihood (only path contribution) along the way.\n\n\n\n\n\n","category":"function"},{"location":"module_index/#Random.rand!","page":"Index","title":"Random.rand!","text":"Random.rand!(\n    [rng::Random.AbstractRNG],\n    P::GuidProp,\n    X, W, y1=zero(P);\n    f=DD.__DEFAULT_F, Wnr=Wiener()\n)\n\nSample a trajectory of a guided proposal P started from y1. Use containers X and W to save the results. Compute the functional f at the time of sampling.\n\n\n\n\n\n","category":"function"},{"location":"module_index/#Random.rand!","page":"Index","title":"Random.rand!","text":"Random.rand!(\n    [rng::Random.AbstractRNG]\n    P::GuidProp,\n    X°, W°, W, ρ, v::Val{:ll}, y1=zero(P);\n    Wnr=Wiener()\n)\n\nSample a trajectory of a guided proposal P started from y1. Use containers X° and W° to save the results. Use a preconditioned Crank-Nicolson scheme with memory parameter ρ and a previously sampled Wiener noise W. Compute log-likelihood (only path contribution) along the way.\n\n\n\n\n\n","category":"function"},{"location":"get_started/overview/#get_started-1","page":"Get started","title":"Installation","text":"","category":"section"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"The package is not registered yet. To install it write:","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"] add https://github.com/JuliaDiffusionBayes/GuidedProposals.jl","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"note: Note\nThe package depends on DiffusionDefinition.jl and ObservationSchemes.jl, neither of which is registered yet. Install them in the same way as GuidedProposals.jl.","category":"page"},{"location":"get_started/overview/#Define-the-law-of-a-guided-proposal-1","page":"Get started","title":"Define the law of a guided proposal","text":"","category":"section"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"The main object defined by this package is GuidProp. It allows for a definition of a guided proposal [arXiv] with some target and auxiliary diffusion laws. To define it, use DiffusionDefinition.jl to define the unconditioned laws, ObservationSchemes.jl to define the observation, and then, construct a GuidProp","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"using GuidedProposals, DiffusionDefinition, ObservationSchemes\nconst GP = GuidedProposals\nconst DD = DiffusionDefinition\nconst OBS = ObservationSchemes\n\nusing StaticArrays, LinearAlgebra\n\n@load_diffusion LotkaVolterra\n@load_diffusion LotkaVolterraAux\n\n# define target law\nθ = [2.0/3.0, 4.0/3.0, 1.0, 1.0, 0.1, 0.1]\nP_target = LotkaVolterra(θ...)\n\n# define the observation and a time-grid\nT, vT = 3.0, @SVector [0.5, 0.8]\ntt, y1 = 0.0:0.001:T, @SVector [2.0, 0.25]\nobs = LinearGsnObs(T, vT; Σ=1e-4*SDiagonal{2,Float64}(I))\n\n# define a guided proposal\nP = GuidProp(tt, P_target, LotkaVolterraAux, obs)","category":"page"},{"location":"get_started/overview/#Define-the-laws-of-multiple-guided-proposals-1","page":"Get started","title":"Define the laws of multiple guided proposals","text":"","category":"section"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"If there are more than one (non-full) observations, then you should construct one GuidProp for each inter-observation interval. This is done automatically with build_guid_prop:","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"# multiple obsevations\nobservs = load_data(\n    ObsScheme(\n        LinearGsnObs(\n            0.0, zero(SVector{2,Float64});\n            Σ = 1e-4*SDiagonal(1.0, 1.0)\n        )\n    ),\n    [1.0, 2.0, 3.0],\n    [[2.2, 0.7], [0.9, 1.0], [0.5, 0.8]]\n)\n\n# packaged in a format of a `recording` from ObservationSchemes.jl\nrecording = (\n    P = P_target,\n    obs = observs,\n    t0 = 0.0,\n    x0_prior = undef\n)\ntts = OBS.setup_time_grids(recording, 0.001)\n\n# create a guided proposal for multiple observations\nPP = build_guid_prop(LotkaVolterraAux, recording, tts)","category":"page"},{"location":"get_started/overview/#Sample-guided-proposals-1","page":"Get started","title":"Sample guided proposals","text":"","category":"section"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"Sampling is done with a function rand:","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"X, W, Wnr = rand(P, y1)","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"that initializes all containers, or with rand! if you initialize the containers yourself:","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"X, W = trajectory(P)\nrand!(P, X, W, y1; Wnr=Wnr)","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"The functions above work for multiple GuidProp as well (that correspond to multiple observations):","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"XX, WW, Wnr = rand(PP, y1)\n# OR\nXX, WW = trajectory(PP)\nrand!(PP, XX, WW, y1)","category":"page"},{"location":"get_started/overview/#Compute-log-likelihoods-1","page":"Get started","title":"Compute log-likelihoods","text":"","category":"section"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"Computation of the log-likelihood may happen after the path has been sampled:","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"ll_path_contrib = loglikhd(P, X)\nll_obs_contrib = loglikhd_obs(P, y1)\nll = ll_path_contrib + ll_obs_contrib\n# OR when passing multiple observations:\nll = loglikhd(PP, XX)","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"or at the time of sampling","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"_, ll_path_contrib = rand!(P, X, W, Val(:ll), y1; Wnr=Wnr)\nll_obs_contrib = loglikhd_obs(P, y1)\nll = ll_path_contrib + ll_obs_contrib\n# OR when passing multiple observations:\n_, ll = rand!(PP, XX, WW, Val(:ll), y1; Wnr=Wnr)","category":"page"},{"location":"get_started/overview/#Compute-path-functionals-1","page":"Get started","title":"Compute path functionals","text":"","category":"section"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"To evaluate functionals while sampling simply pass the method as a named argument f=....","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"X, W, Wnr, f_out = rand(P, y1; f=foo)","category":"page"},{"location":"get_started/overview/#Compute-gradients-of-log-likelihood-or-path-functionals-1","page":"Get started","title":"Compute gradients of log-likelihood or path functionals","text":"","category":"section"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"","category":"page"},{"location":"get_started/overview/#","page":"Get started","title":"Get started","text":"warning: TODO\nto be written-up","category":"page"},{"location":"manual/multiple_obs/#multi_obs_gp-1","page":"Multiple observations","title":"Guided proposals with multiple observations","text":"","category":"section"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"In practice, it is often of interest to sample from some target diffusion law","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"dd X_t = b(tX_t)dd t + sigma(tX_t) dd W_tquad tin0Tquad X_0sim p_0","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"conditionally on multiple, partial observations of X:","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"V_t_i=left L_iX_t_i+eta_ii=1dotsN rightquad L_iinRR^m_itimes dquad eta_isim N(mu_iSigma_i)","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"not only a single one. This can be done by stacking together GuidProp, each defined on its own interval t_i-1t_i and for its own terminal observation V_t_i. The initialization may be done implicitly if you call","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"GuidedProposals.build_guid_prop","category":"page"},{"location":"manual/multiple_obs/#GuidedProposals.build_guid_prop","page":"Multiple observations","title":"GuidedProposals.build_guid_prop","text":"build_guid_prop(\n    ::Type{AuxLaw}, recording::NamedTuple, tts::Vector, args...\n) where {AuxLaw <: DD.DiffusionProcess}\n\nInitialize multiple instances of GuidProp corresponding to guided proposals for observations stored in recording. The time grids for each inter-observation interval is given in tts and AuxLaw is the auxiliary law for creating guided proposals. args... are passed to each constructor of GuidProp.\n\n\n\n\n\nbuild_guid_prop(\n    aux_laws::AbstractArray, recording::NamedTuple, tts::Vector, args\n)\n\nSame as a version with ::Type{AuxLaw}, but aux_laws is a list of auxiliary laws that correspond to each inter-observation interval.\n\n\n\n\n\n","category":"function"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"For instance:","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"observs = load_data(\n    ObsScheme(\n        LinearGsnObs(\n            0.0, zero(SVector{2,Float64});\n            Σ = 1e-4*SDiagonal(1.0, 1.0)\n        )\n    ),\n    [1.0, 2.0, 3.0],\n    [[2.2, 0.7], [0.9, 1.0], [0.5, 0.8]]\n)\n\nrecording = (\n    P = P_target,\n    obs = observs,\n    t0 = 0.0,\n    x0_prior = undef # normally, we would provide a prior, however for the steps\n    # below it is not needed\n)\ntts = OBS.setup_time_grids(recording, 0.001)\n\nPP = build_guid_prop(LotkaVolterraAux, recording, tts)","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"where we have packaged the observations in a format of a recording from ObservationSchemes.jl","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"note: Note\nIt is possible to perform the steps hidden behind a call to build_guid_prop explicitly. To properly initialize the guiding term we must defined the sequence of GuidProp starting from the last interval t_N-1t_N and proceed moving backwards: t_N-2t_N-1dots0t_1, each time passing a GuidProp from the subsequent interval t_it_i+1 to the GuidProp that is being defined on t_i-1t_i. For the observations above this becomes:P_intv3 = GuidProp(tts[3], P_target, LotkaVolterraAux, observs[3])\nP_intv2 = GuidProp(tts[2], P_target, LotkaVolterraAux, observs[2]; next_guid_prop=P_intv3)\nP_intv1 = GuidProp(tts[1], P_target, LotkaVolterraAux, observs[1]; next_guid_prop=P_intv2)That's it, now a vectorP = [P_intv1, P_intv2, P_intv3]is equivalent to PP defined before. Needless to say, calling build_guid_prop instead is recommended.","category":"page"},{"location":"manual/multiple_obs/#Sampling-a-single-trajectory-1","page":"Multiple observations","title":"Sampling a single trajectory","text":"","category":"section"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"Sampling is done analogously to how it was done for a case of a single observation. Simply call rand if you wish to have containers initialized in the background:","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"# sample\nXX, WW, Wnr = rand(PP, y1)\n\n# build a plot\np = plot()\nfor i in 1:3\n    plot!(p, XX[i], Val(:x_vs_y); color=\"steelblue\",label=\"\")\nend\nscatter!(p, [y1[1]],[y1[2]], markersize=8, label=\"starting point\")\nfor i in 1:3\n\t  o = OBS.obs(recording.obs[i])\n    scatter!(p, [o[1]], [o[2]]; label=\"observation $i\", markersize=8, marker=:diamond, markercolor=\"orange\")\nend\ndisplay(p)","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"(Image: guid_prop_multi)","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"Alternatively, initialize containers yourself and then call rand!:","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"XX, WW = trajectory(PP)\nrand!(PP, XX, WW, y1)","category":"page"},{"location":"manual/multiple_obs/#Sampling-multiple-trajectories-1","page":"Multiple observations","title":"Sampling multiple trajectories","text":"","category":"section"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"As it was the case with single observation, sampling multiple trajectories often involves computation of the log-likelihood. Analogously to how it was explained in the previous section, there are three ways of computing log-likelihood and the preferred way is to use the optimized rand! samplers that compute log-likelihoods as the path is being sampled.","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"success, ll = rand!(PP, XX, WW, Val(:ll), y1)","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"Smoothing is now as simple as it was for a single observation. In fact, thanks to the magic of Julia's multiple dispatch we may call the exact same function simple_smoothing that was defined in the previous section and it will work for multiple observations as well!","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"paths = simple_smoothing(P, y1)","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"(Image: lotka_volterra_simple_smoothing_multi)","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"note: Note\nA log-likelihood computed by rand! for a list of trajectories is slightly different than the log-likelihood computed for a single segment. An additional term due to transition densities is added. See the section on log-likelihoods for more details.","category":"page"},{"location":"manual/multiple_obs/#Preconditioned-Crank-Nicolson-scheme-1","page":"Multiple observations","title":"Preconditioned Crank-Nicolson scheme","text":"","category":"section"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"Perturbing Gaussian noise instead of sampling it anew works in exactly the same way as in the previous section.","category":"page"},{"location":"manual/multiple_obs/#","page":"Multiple observations","title":"Multiple observations","text":"XX°, WW° = trajectory(PP)\nρρ = [0.5, 0.8, 0.4] # one memory param for each interval\nrand!(PP, XX°, WW°, WW, ρρ, y1)","category":"page"},{"location":"manual/reparameterizations/#Reparameterizations-of-GuidProp-1","page":"Reparameterizations","title":"Reparameterizations of GuidProp","text":"","category":"section"},{"location":"manual/reparameterizations/#","page":"Reparameterizations","title":"Reparameterizations","text":"","category":"page"},{"location":"manual/reparameterizations/#","page":"Reparameterizations","title":"Reparameterizations","text":"In an MCMC setting we may wish to change the values of some parameters of GuidProp. GuidProp is defined as an immutable struct; however, the fields containing parameter values are mutable, and thus, changing parameters may be done in-place. Changing them directly by accessing relevant places that store parameter values is not advisable, instead, it is recommended to use one of the relevant convenience functions:","category":"page"},{"location":"manual/reparameterizations/#","page":"Reparameterizations","title":"Reparameterizations","text":"GuidedProposals.set_parameters!\nGuidedProposals.equalize_obs_params!\nGuidedProposals.equalize_law_params!\nGuidedProposals.same_entries\nGuidedProposals.is_critical_update","category":"page"},{"location":"manual/reparameterizations/#DiffusionDefinition.set_parameters!","page":"Reparameterizations","title":"DiffusionDefinition.set_parameters!","text":"DD.set_parameters!(\n    PP::AbstractArray{<:GuidProp},\n    PP°::AbstractArray{<:GuidProp},\n    θ°,\n    var_p_names,\n    var_p_aux_names,\n    θ_local_names,\n    θ_local_aux_names,\n    θ_local_obs_ind,\n    critical_change = is_critical_update(\n        PP, θ_local_aux_names, θ_local_obs_ind\n    ),\n)\n\nSet parameters of Guided proposals PP° in an MCMC setting.\n\n...\n\nArguments\n\nPP: containers indicating how PP° should look like before θ° update\nθ°: a vector with new parameters to be potentially set inside PP°\nvar_p_names: list of all variable parameter names in PP\nvar_p_aux_names: list of all variable parameter names of auxiliary laws in\n\nPP\n\nθ_local_names: list of pairs with relevant θ° entries for the target law\n\nin a format (idx-of-param-in-θ°::Int64, param-name-in-law::Symbol)\n\nθ_local_aux_names: list of pairs with relevant θ° entries for the aux law\n\nin a format (idx-of-param-in-θ°::Int64, param-name-in-law::Symbol)\n\nθ_local_obs_ind: list of pairs with relevant θ° entries for the\n\nobservations in a format (idx-of-param-in-θ°::Int64, idx-in-obs::Int64)\n\ncritical_change: boolean for whether θ° update alters any critical\n\nparameters prompting for recomputation of the guiding term ...\n\n\n\n\n\nDD.set_parameters!(\n    PP::AbstractArray{<:GuidProp},\n    θ°,\n    θ_local_names,\n    θ_local_aux_names,\n    θ_local_obs_ind\n)\n\nGo throught the collection of GuidProps in PP and set the new parameters θ° in relevant fields. θ_local_names lists which fields in the target law need changing. θ_local_aux_names lists the same for the auxiliary laws and θ_local_obs_ind for the observations.\n\n\n\n\n\nDD.set_parameters!(\n    P::GuidProp,\n    θ°,\n    θ_local_names,\n    θ_local_aux_names,\n    θ_local_obs_ind\n)\n\nSet the new parameters θ° in P. θ_local_names lists which fields in the target law need changing. θ_local_aux_names lists the same for the auxiliary law and θ_local_obs_ind for the observation.\n\n\n\n\n\nDD.set_parameters!(P::GuidProp, θ°::Dict)\n\nConvenience parameter setter\n\n\n\n\n\nDD.set_parameters!(PP::AbstractArray{<:GuidProp}, θ°::Dict)\n\nConvenience parameter setter\n\n\n\n\n\n","category":"function"},{"location":"manual/reparameterizations/#GuidedProposals.equalize_obs_params!","page":"Reparameterizations","title":"GuidedProposals.equalize_obs_params!","text":"equalize_obs_params!(\n    PP::AbstractArray{<:GuidProp},\n    PP°::AbstractArray{<:GuidProp}\n)\n\nGo through a collection of GuidProp in PP° and make sure that all observation parameters are the same. If not, equalize them and return a critical_change flag indicating that GuidProp laws need to be recomputed.\n\n\n\n\n\n","category":"function"},{"location":"manual/reparameterizations/#GuidedProposals.equalize_law_params!","page":"Reparameterizations","title":"GuidedProposals.equalize_law_params!","text":"equalize_law_params!(\n    PP::AbstractArray{<:GuidProp},\n    PP°::AbstractArray{<:GuidProp},\n    var_p_names,\n    var_p_aux_names,\n)\n\nGo through two collections of GuidProp and compare their variable parameters. If any of the parameters in PP° ends up being different than in PP then equalize them and if any of them belongs to the auxiliary law then return a critical_change flag.\n\n\n\n\n\n","category":"function"},{"location":"manual/reparameterizations/#DiffusionDefinition.same_entries","page":"Reparameterizations","title":"DiffusionDefinition.same_entries","text":"DD.same_entries(\n    PP::AbstractArray{<:GuidProp},\n    PP°::AbstractArray{<:GuidProp},\n    entries\n)\n\nGo through the collections of guided proposals PP and PP° and compare if they share the same values of fields listed in entries.\n\n\n\n\n\n","category":"function"},{"location":"manual/reparameterizations/#GuidedProposals.is_critical_update","page":"Reparameterizations","title":"GuidedProposals.is_critical_update","text":"is_critical_update(\n    PP::AbstractArray{<:GuidProp},\n    θ_local_aux_names,\n    θ_local_obs_ind\n)\n\nCheck if the update of parameters that updates the fields of the auxiliary law listed in θ_local_aux_names and the observations listed in θ_local_obs_ind is critical i.e. whether it prompts for recomputation of the guiding term.\n\n\n\n\n\n","category":"function"},{"location":"manual/reparameterizations/#recompute_guiding_term-1","page":"Reparameterizations","title":"Re-computing the guiding term","text":"","category":"section"},{"location":"manual/reparameterizations/#","page":"Reparameterizations","title":"Reparameterizations","text":"","category":"page"},{"location":"manual/reparameterizations/#","page":"Reparameterizations","title":"Reparameterizations","text":"Sometimes changing parameter values is all that needs to be done; however, it is not always the case. Often changing parameter values implies that the terms used for computation of the guiding term also need to be updated. This needs to be done whenever any parameter of the auxiliary law or any parameter of an observation has changed.","category":"page"},{"location":"manual/reparameterizations/#","page":"Reparameterizations","title":"Reparameterizations","text":"To actually re-compute the guiding terms and finalize the reparameterization you need to call","category":"page"},{"location":"manual/reparameterizations/#","page":"Reparameterizations","title":"Reparameterizations","text":"GuidedProposals.recompute_guiding_term!","category":"page"},{"location":"manual/reparameterizations/#GuidedProposals.recompute_guiding_term!","page":"Reparameterizations","title":"GuidedProposals.recompute_guiding_term!","text":"recompute_guiding_term!(P::GuidProp, next_guided_prop=nothing)\n\nRecompute the guiding term (most often used after update of parameters or change of an observation). next_guided_prop is the guided proposal law from the subsequent interval\n\n\n\n\n\nrecompute_guiding_term!(PP::Vector{<:GuidProp})\n\nRecompute the guiding term for the entire trajectory with all observations (most often used after update of parameters or change of an observation).\n\n\n\n\n\n","category":"function"},{"location":"manual/reparameterizations/#","page":"Reparameterizations","title":"Reparameterizations","text":"All changes above are done in-place.","category":"page"},{"location":"manual/log_likelihood/#log_likelihood_computations-1","page":"Log-likelihoods","title":"Computations of log-likelihoods","text":"","category":"section"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"","category":"page"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"The full likelihood function for a sampled path X given by:","category":"page"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"frac\n    colorforestgreen\n        tilderho(0X_0)\n    \n\n    colormaroon\n        rho(0X_0)\n    \nexpleft\n    colorroyalblue\n        int_0^T G(t X_t) dd t\n    \nright","category":"page"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"where","category":"page"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"G(tx)=left\n    (b-tildeb)^Ttilder\n    + 05 trleft\n        (a-tildea)(tildertilder^T-H)\n    right\nright(tx)","category":"page"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"and tilder(tx)=nablalogtilderho(tx). The terms colorroyalblueint_0^T G(t X_t) dd t, and logleft(colorforestgreentilderho(0X_0)right) may be computed with functions:","category":"page"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"GuidedProposals.loglikhd","category":"page"},{"location":"manual/log_likelihood/#GuidedProposals.loglikhd","page":"Log-likelihoods","title":"GuidedProposals.loglikhd","text":"loglikhd([::IntegrationRule=::LeftRule], P::GuidProp, X::Trajectory; skip=0)\n\nCompute path contribution to the log-likelihood function, i.e.:\n\nint_0^T G(t X_t) dt\n\nwhere\n\nG(tx)=left\n    (b-tildeb)^Ttilder\n    + 05 trleft\n        (a-tildea)(tildertilder^T-H)\n    right\nright(tx)\n\nand tilder(tx)=nablalogtilderho(tx).\n\nloglikhd(\n    [::IntegrationRule=::LeftRule],\n    PP::AbstractArray{<:GuidProp}, XX::AbstractArray{<:Trajectory};\n    skip=0\n)\n\nCompute path contribution to the log-likelihood function for a sequence of segments.\n\n\n\n\n\n","category":"function"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"and","category":"page"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"GuidedProposals.loglikhd_obs","category":"page"},{"location":"manual/log_likelihood/#GuidedProposals.loglikhd_obs","page":"Log-likelihoods","title":"GuidedProposals.loglikhd_obs","text":"loglikhd_obs(P::GuidProp, x0)\n\nCompute the contribution of end-points to the log-likelihood function, i.e.: logrho(tx).\n\n\n\n\n\n","category":"function"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"respectively. In general, deriving the term colormaroonrho(0X_0) explicitly is impossible. Thankfully though, in an MCMC or an importance sampling setting this term always cancels out and so never needs to be computed.","category":"page"},{"location":"manual/log_likelihood/#Log-likelihood-computation-whilst-sampling-1","page":"Log-likelihoods","title":"Log-likelihood computation whilst sampling","text":"","category":"section"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"","category":"page"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"Function rand!—when called with a parameter Val(:ll)—computes the \"log-likelihood\" at the time of sampling. Internally the following function is called after the Wiener process is sampled.","category":"page"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"GuidedProposals.solve_and_ll!","category":"page"},{"location":"manual/log_likelihood/#GuidedProposals.solve_and_ll!","page":"Log-likelihoods","title":"GuidedProposals.solve_and_ll!","text":"solve_and_ll!(X, W, P, y1)\n\nCompute the trajectory under the law P for a given Wiener noise W and a starting point y1. Store the trajectory in XX. Compute the log-likelihood (path contribution) along the way. Return success_flag and log-likelihood. success_flag is set to false only if sampling was prematurely halted due to XX violating assumptions about state space.\n\n\n\n\n\n","category":"function"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"solve_and_ll! computes only colorroyalblueint_0^T G(t X_t) dd t.","category":"page"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"When rand! is called on a single GuidProp (i.e. a single interval) then only this path contribution is returned.\nHowever, if rand! is called on a list of GuidProp, then apart from summing over the results from solve_and_ll! an additional end-point contribution is added, i.e.","category":"page"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"colorroyalblueint_0^T G(t X_t) dd t+logleft(colorforestgreentilderho(0X_0)right)","category":"page"},{"location":"manual/log_likelihood/#","page":"Log-likelihoods","title":"Log-likelihoods","text":"is returned.","category":"page"},{"location":"manual/path_functionals/#Computing-path-functionals-1","page":"Computing path functionals","title":"Computing path functionals","text":"","category":"section"},{"location":"manual/path_functionals/#","page":"Computing path functionals","title":"Computing path functionals","text":"","category":"page"},{"location":"manual/path_functionals/#","page":"Computing path functionals","title":"Computing path functionals","text":"This package uses the Euler-Maruyama solvers implemented in DiffusionDefinition.jl to sample diffusion trajectories. Consequently, in the same way that in the latter package it has been possible to compute path functionals whilst sampling, it is possible to do so for the conditioned trajectories of guided proposals sampled with this package as well.","category":"page"},{"location":"manual/path_functionals/#Sampling-over-a-single-interval-1","page":"Computing path functionals","title":"Sampling over a single interval","text":"","category":"section"},{"location":"manual/path_functionals/#","page":"Computing path functionals","title":"Computing path functionals","text":"","category":"page"},{"location":"manual/path_functionals/#","page":"Computing path functionals","title":"Computing path functionals","text":"To compute a functional when sampling over a single interval simply pass a named argument f=... with a function you wish to evaluate. The function that you pass must have the following methods defined for it:","category":"page"},{"location":"manual/path_functionals/#","page":"Computing path functionals","title":"Computing path functionals","text":"# called at the very start of solve!\nf_accum = foo(P, y)\n# called at the beginning of every iteration of the Euler-Maruyama scheme\nf_accum = foo(f_accum, P, y, t, dt, dW, i)\n# called at the very end, just before return statement\nf_accum = foo(f_accum, P, y, Val(:final))","category":"page"},{"location":"manual/path_functionals/#","page":"Computing path functionals","title":"Computing path functionals","text":"For in-place computations these three functions must have a slightly different form","category":"page"},{"location":"manual/path_functionals/#","page":"Computing path functionals","title":"Computing path functionals","text":"# called at the very start of solve!\nf_accum = foo(buffer, P, y) # the buffer needs to accommodate the needs of function f\n# called at the beginning of every iteration of the Euler-Maruyama scheme\nfoo(buffer, P, y, tt[i-1], dt, i-1)\n# called at the very end, just before return statement\nfoo(buffer, P, y, _FINAL)","category":"page"},{"location":"manual/path_functionals/#","page":"Computing path functionals","title":"Computing path functionals","text":"You may pass it to rand or rand! so long as Val(:ll) is not passed (i.e. so long as you are not calling optimized sampler that already computes the log-likelihood for you).","category":"page"},{"location":"manual/path_functionals/#Sampling-over-multiple-intervals-1","page":"Computing path functionals","title":"Sampling over multiple intervals","text":"","category":"section"},{"location":"manual/path_functionals/#","page":"Computing path functionals","title":"Computing path functionals","text":"","category":"page"},{"location":"manual/path_functionals/#","page":"Computing path functionals","title":"Computing path functionals","text":"To compute functionals when sampling over multiple intervals, instead of passing a single method as a named argument f=... pass a list of methods, say f=[foo₁,foo₂,foo₃], one for each interval. Additionally, pass an extra container to a named argument f_out. The results of method evaluation on each interval are going to be saved there.","category":"page"},{"location":"manual/path_functionals/#Computing-gradients-of-path-functionals-1","page":"Computing path functionals","title":"Computing gradients of path functionals","text":"","category":"section"},{"location":"manual/path_functionals/#","page":"Computing path functionals","title":"Computing path functionals","text":"","category":"page"},{"location":"manual/path_functionals/#","page":"Computing path functionals","title":"Computing path functionals","text":"Just as it was described in DiffusionDefinition.jl, it is possible to compute gradients while sampling.","category":"page"},{"location":"manual/path_functionals/#","page":"Computing path functionals","title":"Computing path functionals","text":"warning: TODO\nComplete the description.","category":"page"},{"location":"tutorials/parameter_inference/#Parameter-inference-on-the-example-of-FitzHugh-Nagumo-model-1","page":"Parameter inference","title":"Parameter inference on the example of FitzHugh-Nagumo model","text":"","category":"section"},{"location":"tutorials/parameter_inference/#","page":"Parameter inference","title":"Parameter inference","text":"In this tutorial we will explain how to perform Bayesian inference via MCMC sampling with GuidedProposals.jl on the example of the FitzHugh-Nagumo model. We will write a Metropolis-within-Gibbs algorithm that alternately imputes the unobserved path and updates unknown parameter. We will conduct inference for a single parameter, but it will be clear how to extend this tutorial to multiple parameters.","category":"page"},{"location":"tutorials/parameter_inference/#Introduction-1","page":"Parameter inference","title":"Introduction","text":"","category":"section"},{"location":"tutorials/parameter_inference/#Prerequisites-1","page":"Parameter inference","title":"Prerequisites","text":"","category":"section"},{"location":"tutorials/parameter_inference/#","page":"Parameter inference","title":"Parameter inference","text":"using GuidedProposals, DiffusionDefinition, ObservationSchemes\nconst GP = GuidedProposals\nconst DD = DiffusionDefinition\nconst OBS = ObservationSchemes\n\nusing StaticArrays, Random, Plots","category":"page"},{"location":"tutorials/parameter_inference/#Data-generation-1","page":"Parameter inference","title":"Data generation","text":"","category":"section"},{"location":"tutorials/parameter_inference/#","page":"Parameter inference","title":"Parameter inference","text":"@load_diffusion FitzHughNagumo\n# generate some data\nθ = [0.1, -0.8, 1.5, 0.0, 0.3]\nP = FitzHughNagumo(θ...)\ntt, y1 = 0.0:0.0001:10.0, @SVector [-0.9, -1.0]\nX = rand(P, tt, y1)\ndata = map(\n\tx->(x[1], x[2][1] + 0.1randn()),\n\tcollect(zip(X.t, X.x))[1:1000:end]\n)[2:end]\n#TODO introduce data collection in `ObservationSchemes.jl` with `ObsScheme()` object","category":"page"},{"location":"tutorials/parameter_inference/#","page":"Parameter inference","title":"Parameter inference","text":"# let's examine the data\nplot(X, Val(:vs_time), size=(800, 300))\nscatter!(map(x->x[1], data), map(x->x[2], data), label=\"data\")","category":"page"},{"location":"tutorials/parameter_inference/#","page":"Parameter inference","title":"Parameter inference","text":"(Image: data)","category":"page"},{"location":"tutorials/parameter_inference/#Data-preparation-1","page":"Parameter inference","title":"Data preparation","text":"","category":"section"},{"location":"tutorials/parameter_inference/#","page":"Parameter inference","title":"Parameter inference","text":"# let's prepare the data\nrecording = (\n\tP = FitzHughNagumo([0.1, #==# 0.0 #==#, 1.5, 0.0, 0.3]...),\n\tobs = load_data(\n\t\tObsScheme(\n\t\t\tLinearGsnObs(\n\t\t\t\t0.0, (@SVector [0.0]);\n\t\t\t\tL=(@SMatrix [1.0 0.0]), Σ=(@SMatrix [0.01])\n\t\t\t)\n\t\t),\n\t\tdata\n\t),\n\tt0 = 0.0,\n\tx0_prior = KnownStartingPt(y1),\n)","category":"page"},{"location":"tutorials/parameter_inference/#Inference-algorithm-1","page":"Parameter inference","title":"Inference algorithm","text":"","category":"section"},{"location":"tutorials/parameter_inference/#","page":"Parameter inference","title":"Parameter inference","text":"# define a simple transition kernel\nfunction customkernel(θ, s::Symbol, scale=0.1)\n\tθ° = deepcopy(θ)\n\tθ°[s] += 2.0*scale*(rand()-0.5)\n\tθ°\nend\n\n# and define a function that does the inference\nfunction simple_inference(AuxLaw, recording, dt, θ; ρ=0.5, num_steps=10^4)\n\t# initializations\n\ttts = OBS.setup_time_grids(recording, dt)\n\tρρ = [ρ for _ in tts]\n\tPP = build_guid_prop(AuxLaw, recording, tts)\n\tPP° = deepcopy(PP)\n\n\ty1 = rand(recording.x0_prior) # just returns the starting point\n\tXX, WW, Wnr = rand(PP, y1)\n\tXX°, WW° = trajectory(PP)\n\n\tll = loglikhd(PP, XX)\n\tpaths = []\n\tθθ = Float64[θ[:s],]\n\timp_a_r = 0\n\tparam_a_r = 0\n\n\t# MCMC\n\tfor i in 1:num_steps\n\t\t# impute a path\n\t\t_, ll° = rand!(PP, XX°, WW°, WW, ρρ, Val(:ll), y1; Wnr=Wnr)\n\n\t\tif rand() < exp(ll°-ll)\n\t\t\tXX, WW, XX°, WW° = XX°, WW°, XX, WW\n\t\t\tll = ll°\n\t\t\timp_a_r += 1\n\t\tend\n\n\t\t# update parameter s\n\t\tθ° = customkernel(θ, :s, 0.3)\n\t\tDD.set_parameters!(PP°, θ°)\n\t\trecompute_guiding_term!(PP°)\n\t\t_, ll° = GP.solve_and_ll!(XX°, WW, PP°, y1)\n\n\t\tif rand() < exp(ll°-ll) # uniform updates have no contribution to ll\n\t\t\tXX, PP, θ, XX°, PP°, θ° = XX°, PP°, θ°, XX, PP, θ\n\t\t\tll = ll°\n\t\t\tparam_a_r += 1\n\t\tend\n\t\tappend!(θθ, [θ[:s]])\n\n\n\t\t# progress message\n\t\tif i % 100 == 0\n\t\t\tprintln(\n\t\t\t\t\"$i. ll=$ll, s=$(θ[:s]), imp accpt rate: $(imp_a_r/100), \",\n\t\t\t\t\"updt accpt rate: $(param_a_r/100)\"\n\t\t\t)\n\t\t\timp_a_r = param_a_r = 0\n\t\tend\n\n\t\t# save intermediate path for plotting\n\t\ti % 400 == 0 && append!(paths, [deepcopy(XX)])\n\tend\n\tpaths, θθ\nend","category":"page"},{"location":"tutorials/parameter_inference/#Performing-inference-1","page":"Parameter inference","title":"Performing inference","text":"","category":"section"},{"location":"tutorials/parameter_inference/#","page":"Parameter inference","title":"Parameter inference","text":"@load_diffusion FitzHughNagumoAux\n# let's declare which parameters are not changing\nDD.const_parameter_names(::Type{<:FitzHughNagumo}) = (:ϵ, :γ, :β, :σ)\nDD.const_parameter_names(::Type{<:FitzHughNagumoAux}) = (:ϵ, :γ, :β, :σ, :t0, :T, :vT, :xT)\n\n# and do the inference\npaths, θθ = simple_inference(\n\tFitzHughNagumoAux, recording, 0.001, Dict(:s=>0.0); ρ=0.96, num_steps=10^4\n)","category":"page"},{"location":"tutorials/parameter_inference/#","page":"Parameter inference","title":"Parameter inference","text":"It takes about 45sec on my laptop...","category":"page"},{"location":"tutorials/parameter_inference/#Examining-the-results-1","page":"Parameter inference","title":"Examining the results","text":"","category":"section"},{"location":"tutorials/parameter_inference/#","page":"Parameter inference","title":"Parameter inference","text":"plot(θθ)","category":"page"},{"location":"tutorials/parameter_inference/#","page":"Parameter inference","title":"Parameter inference","text":"(Image: fhn_mcmc_chain)","category":"page"},{"location":"tutorials/parameter_inference/#","page":"Parameter inference","title":"Parameter inference","text":"p = plot(size=(1400, 800))\nfor path in paths[end-10:end]\n\tfor i in eachindex(path)\n\t\tplot!(p, path[i], Val(:vs_time), alpha=0.4, label=\"\", color=[\"red\" \"steelblue\"])\n\tend\nend\nscatter!(p, map(x->x[1], data), map(x->x[2], data), label=\"data\")\ndisplay(p)","category":"page"},{"location":"tutorials/parameter_inference/#","page":"Parameter inference","title":"Parameter inference","text":"(Image: paths)","category":"page"},{"location":"tutorials/parameter_inference/#","page":"Parameter inference","title":"Parameter inference","text":"tip: Tip\nAdjusting the code presented in this tutorial to other diffusion processes, observation schemes or flavors of MCMC algorithm should be fairly straightforward, albeit can become tedious. Package DiffusionMCMC.jl (currently under development) has been designed precisely with this in mind and aims to remove the unnecessary, tedious work from the user when performing MCMC inference.","category":"page"},{"location":"tutorials/in_place_vs_out_of_place/#tutorials_start-1","page":"(TODO) Understanding in-place vs out-of-place","title":"Understanding in-place vs out-of-place methods and how to call them","text":"","category":"section"},{"location":"how_to_guides/sample_bridges/#how_to_guides-1","page":"(TODO) Sample diffusion bridges","title":"How to sample diffusion bridges","text":"","category":"section"},{"location":"manual/ode_type/#ode_types-1","page":"(TODO) ODE systems","title":"ODE systems for computing the guiding term","text":"","category":"section"},{"location":"manual/ode_type/#","page":"(TODO) ODE systems","title":"(TODO) ODE systems","text":"","category":"page"},{"location":"manual/ode_type/#","page":"(TODO) ODE systems","title":"(TODO) ODE systems","text":"The guiding term can be computed in a variety of ways. Here, we provide four distinct methods—corresponding to three systems of ODEs and a direct method via evaluations of matrix exponentials—for achieving this feat.","category":"page"},{"location":"manual/ode_type/#","page":"(TODO) ODE systems","title":"(TODO) ODE systems","text":"warning: Warning\nCurrently only a method via solving ODEs for H, F and c has been implemented.","category":"page"},{"location":"manual/ode_type/#Exact-equations-1","page":"(TODO) ODE systems","title":"Exact equations","text":"","category":"section"},{"location":"manual/ode_type/#","page":"(TODO) ODE systems","title":"(TODO) ODE systems","text":"","category":"page"},{"location":"manual/ode_type/#System-of-ODEs-for-H,-F-and-c-1","page":"(TODO) ODE systems","title":"System of ODEs for H, F and c","text":"","category":"section"},{"location":"manual/ode_type/#","page":"(TODO) ODE systems","title":"(TODO) ODE systems","text":"","category":"page"},{"location":"manual/ode_type/#System-of-ODEs-for-M,-L-and-μ-1","page":"(TODO) ODE systems","title":"System of ODEs for M, L and μ","text":"","category":"section"},{"location":"manual/ode_type/#","page":"(TODO) ODE systems","title":"(TODO) ODE systems","text":"","category":"page"},{"location":"manual/ode_type/#System-of-ODEs-for-P,-\\nu-and-c-1","page":"(TODO) ODE systems","title":"System of ODEs for P, nu and c","text":"","category":"section"},{"location":"manual/ode_type/#","page":"(TODO) ODE systems","title":"(TODO) ODE systems","text":"","category":"page"},{"location":"manual/guid_prop/#manual_start-1","page":"Guided proposals","title":"Defining guided proposals","text":"","category":"section"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"The main object used to define guided proposals is","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"GuidedProposals.GuidProp","category":"page"},{"location":"manual/guid_prop/#GuidedProposals.GuidProp","page":"Guided proposals","title":"GuidedProposals.GuidProp","text":"struct GuidProp{\n        K,DP,DW,SS,R,R2,O,S,T\n        } <: DiffusionDefinition.DiffusionProcess{K,DP,DW,SS}\n    P_target::R\n    P_aux::R2\n    obs::O\n    guiding_term_solver::S\nend\n\nStruct defining guided proposals of M Schauer, F van der Meulen and H van Zanten. See Mider M, Schauer M and van der Meulen F \"Continuous-discrete smoothing of diffusions\" (2020) for a comprehensive overview of the mathematics behind this object. It computes and stores the guiding term ∇logρ and allows for simulation of guided proposals and computation of their likelihood.\n\nGuidProp(\n        tt,\n        P_target::R,\n        P_aux_type::Type{TR2},\n        obs::O,\n        solver_choice=(\n            solver=Tsit5(),\n            ode_type=:HFc,\n            convert_to_HFc=false,\n            mode=:inplace,\n            gradients=false,\n            eltype=Float64,\n        ),\n        next_guided_prop=nothing\n    ) where {\n        R<:DD.DiffusionProcess,\n        TR2<:DD.DiffusionProcess,\n        O<:OBS.Observation\n    }\n\nDefault constructor. P_target and P_aux are the target and the type of the auxiliary diffusion laws respectively, tt is the time-grid on which ∇logρ needs to be computed. obs is the terminal observation (and the only one on the interval (tt[1], tt[end]]). solver_choice specifies the type of ODE solver that is to be used for computations of ∇logρ     ( it is a NamedTuple, where solver specifies the algorithm for solving     ODEs (see the documentation of DifferentialEquations.jl for possible     choices), ode_type picks the ODE system (between :HFc, :MLμ and :Pν),     convert_to_HFc indicates whether to translate the results of M,L,μ solver     to H,F,c objects, mode is a flag indicating the way in which data is being     handled:     - :inplace: uses regular arrays to store the data (requires functions                   B!, β!, σ! and a! to be defined)     - :outofplace: operates on static arrays     - :gpu: operates on GPU arrays [TODO not implemented yet]     gradients is a flag indicating whether automatic differentiation is to     be employed and eltype indicates the data-type of each container's     member. ) Finally, next_guided_prop is the guided proposal for the subsequent inter-observation interval.\n\n\n\n\n\n","category":"type"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"The main role of this object is to facilitate sampling of diffusion paths from some target diffusion law by:","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"drawing from a proposal diffusion law &\ncomputing an importance sampling weight","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"Performing these two steps in a setting of importance sampling or mcmc sampling makes it possible to draw sample-paths from the target law.","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"note: Note\nFrom the conceptual point of view, the target and auxiliary laws, as well as the terminal observations are all required to define a guided proposal. However, conceptually, guided proposals are defined as continuous-time processes, and thus, it should be possible to look-up the value of any sampled trajectory at any time tin0T. tt— the time grid on which the path is to be revealed—is thus conceptually superfluous at the time of initialization. Nonetheless, for the purposes that this package was created fixing a time-grid tt at initialization of any GuidProp is helpful in reducing the computational cost of the algorithm. Currently, if sampling on finer grid is needed at any point, then GuidProp object needs to be redefined.","category":"page"},{"location":"manual/guid_prop/#Defining-the-target-law-1","page":"Guided proposals","title":"Defining the target law","text":"","category":"section"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"To define the target law we should make use another package from the JuliaDiffusionBayes suite: DiffusionDefinition.jl. We can either define the target law using the macro @define_diffusion or—if we can—simply load in a pre-defined processes.","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"tip: Running example—Lotka-Volterra model—defining the target law\nusing DiffusionDefinition\nconst DD = DiffusionDefinition\n@load_diffusion LotkaVolterra # for constructing the target law\n\nθ = [2.0/3.0, 4.0/3.0, 1.0, 1.0, 0.2, 0.2]\nP_target = LotkaVolterra(θ...)","category":"page"},{"location":"manual/guid_prop/#Defining-the-auxiliary-law-1","page":"Guided proposals","title":"Defining the auxiliary law","text":"","category":"section"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"When we pass the auxiliary law to GuidProp we pass only the name of a struct that defines it and not the actual instance of it. The object will be initialized internally by GuidProp. For this reason, the following convention MUST be adhered to:","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"the auxiliary law is limited to having the same parameter names as the target law; internally GuidProp cycles through all parameters needed by the auxiliary law and looks for the corresponding entry in the target law and uses values of the corresponding parameters found there. Importantly, the association is done by name\nin addition to parameters the auxiliary law is expected to have the following fields of the type :auxiliary_info:\n:t0\n:T\n:vT","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"Additionally, the field :xT will be defined automatically and (if need be) auto-initialized (but can also be declared explicitly).","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"warning: Warning\nNo other field from :auxiliary_info (apart from explicitly declaring :xT) can be used (i.e. fields :v0 and :x0). This last restriction will probably be relaxed in the near future.","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"tip: Running example—Lotka-Volterra model—defining the auxiliary law\n@load_diffusion LotkaVolterraAux","category":"page"},{"location":"manual/guid_prop/#Defining-the-terminal-observation-1","page":"Guided proposals","title":"Defining the terminal observation","text":"","category":"section"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"To define the terminal observation we should make use of another package from the JuliaDiffusionBayes.jl suite: ObservationSchemes.jl.","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"tip: Running example—Lotka-Volterra model—defining the observation\nLet's initialize an observation sampled according to a scheme: $ v=X+\\eta,\\quad \\eta\\sim N(0,I). $using ObservationSchemes, StaticArrays\nt, xₜ = 3.0, @SVector [0.5, 0.8]\nobs = LinearGsnObs(t, xₜ; Σ=1e-4*SDiagonal{2,Float64}(I))","category":"page"},{"location":"manual/guid_prop/#Initializing-GuidProp-1","page":"Guided proposals","title":"Initializing GuidProp","text":"","category":"section"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"It is now possible to define GuidProp. We may specify the time-grid, and then, leave the remaining parameters at their defaults. At initialization time a sequence of computations is performed that derive a guiding term for t's lying on a pre-specified time-grid tt, as well as some additional quantities that are needed for computations of the log-likelihoods.","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"tip: Running example—Lotka-Volterra model—defining GuidProp\ndt = 0.001\ntt = 0.0:dt:t\nP = GuidProp(tt, P_target, LotkaVolterraAux, obs)","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"note: Note\nIf at any point the parameters change, then the guiding term might need to be re-computed (in fact, this is the centerpiece of the backward filtering part of the forward filtering-backward guiding algorithm). We provide certain utility functions that facilitate these operations. See ... for more details.","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"note: Note\nAdditional set of options passed to GuidProp are specified in the field solver_choice, which by default is set to:solver_choice=(\n      solver=Tsit5(),\n      ode_type=:HFc,\n      convert_to_HFc=false,\n      mode=:outofplace,\n      gradients=false,\n      eltype=Float64,\n)The constructor expects it to be a NamedTuple with the respective fields (but it is robust enough to fill-in any missing fields with defaults). The meaning of the fields is as follows:solver is passed to DifferentialEquations.jl to pick an algorithm for solving ODEs that define the guiding term. More about the ODE systems is written in ODE types.\node_type is used to pick between three choices of ODE systems to use: H, F, c system, M, L, μ system and P, ν (and c, but c needs to be added to names). They have the labels: :HFc, MLμ, Pν respectively, which are not case sensitive and currently only HFc is implemented)\nconvert_to_HFc is used only when :MLμ has been chosen to be a solver of ODEs. In that scenario, if convert_to_HFc is set to true, then the terms M, L, μ that the ODE systems solve for will be used to compute the corresponding H, F, c terms (as opposed to using :HFc solver to solve for them)\nmode is an important flag (currently only :outofplace is fully supported) and it is used to tell GuidProp what type of computations are being performed: out-of-place :outofplace, which are based on SVectors from StaticArrays.jl, in-place :inplace, which are based on Vectors or :gpu, which are based on cuArrays.\ngradients is another important flag for telling GuidProp whether gradients with respect to something need to be computed.\neltype ignore this for a moment, we need to figure some things out with this...","category":"page"},{"location":"manual/guid_prop/#Sampling-guided-proposals-1","page":"Guided proposals","title":"Sampling guided proposals","text":"","category":"section"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"Once GuidProp has been initialized, trajectories of guided proposals may be sampled from it.","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"GuidedProposals.rand\nGuidedProposals.rand!","category":"page"},{"location":"manual/guid_prop/#Base.rand","page":"Guided proposals","title":"Base.rand","text":"Base.rand(\n    [rng::Random.AbstractRNG], P::GuidProp, y1=zero(P); f=DD.__DEFAULT_F\n)\n\nSample a trajectory of a guided proposal P started from y1. Initialize containers in the background and compute the functional f at the time of sampling.\n\n\n\n\n\nBase.rand(\n    [rng::Random.AbstractRNG],\n    PP::AbstractArray{<:GuidProp}, y1=zero(PP[1]); f=DD.__DEFAULT_F\n)\n\nSample a trajectory started from y1, defined for multiple guided proposals PP that correspond to consecutive intervals. Initialize containers in the background and compute the functionals f (one for each interval) at the time of sampling.\n\n\n\n\n\n","category":"function"},{"location":"manual/guid_prop/#Random.rand!","page":"Guided proposals","title":"Random.rand!","text":"Random.rand!(\n    [rng::Random.AbstractRNG],\n    P::GuidProp,\n    X, W, y1=zero(P);\n    f=DD.__DEFAULT_F, Wnr=Wiener()\n)\n\nSample a trajectory of a guided proposal P started from y1. Use containers X and W to save the results. Compute the functional f at the time of sampling.\n\n\n\n\n\nRandom.rand!(\n    [rng::Random.AbstractRNG],\n    P::GuidProp,\n    X°, W°, W, ρ, y1=zero(P);\n    f=DD.__DEFAULT_F, Wnr=Wiener()\n)\n\nSample a trajectory of a guided proposal P started from y1. Use containers X° and W° to save the results. Use a preconditioned Crank-Nicolson scheme with memory parameter ρ and a previously sampled Wiener noise W. Compute the functional f at the time of sampling.\n\n\n\n\n\nRandom.rand!(\n    [rng::Random.AbstractRNG]\n    P::GuidProp,\n    X, W, v::Val{:ll}, y1=zero(P);\n    Wnr=Wiener()\n)\n\nSample a trajectory of a guided proposal P started from y1. Use containers X and W to save the results. Compute log-likelihood (only path contribution) along the way.\n\n\n\n\n\nRandom.rand!(\n    [rng::Random.AbstractRNG]\n    P::GuidProp,\n    X°, W°, W, ρ, v::Val{:ll}, y1=zero(P);\n    Wnr=Wiener()\n)\n\nSample a trajectory of a guided proposal P started from y1. Use containers X° and W° to save the results. Use a preconditioned Crank-Nicolson scheme with memory parameter ρ and a previously sampled Wiener noise W. Compute log-likelihood (only path contribution) along the way.\n\n\n\n\n\nRandom.rand!(\n    [rng::Random.AbstractRNG]\n    PP::AbstractArray{<:GuidProp},\n    XX, WW, y1=zero(PP[1]);\n    f=DD.__DEFAULT_F, f_out=DD.__DEFAULT_F, Wnr=Wiener()\n)\n\nSample a trajectory started from y1 over multiple intervals for guided proposals PP that correspond to consecutive intervals. Use containers XX and WW to save the results. Compute the functionals f (one for each interval) at the time of sampling and store the results in f_out.\n\n\n\n\n\nRandom.rand!(\n    [rng::Random.AbstractRNG]\n    PP::AbstractArray{<:GuidProp},\n    XX°, WW°, WW, ρρ, y1=zero(PP[1]);\n    f=DD.__DEFAULT_F, f_out=DD.__DEFAULT_F, Wnr=Wiener()\n)\n\nSample a trajectory started from y1 over multiple intervals for guided proposals PP that correspond to consecutive intervals. Use containers XX° and WW° to save the results. Use a preconditioned Crank-Nicolson scheme with memory parameters ρρ (one for each interval) and a previously sampled Wiener noise WW. Compute the functionals f (one for each interval) at the time of sampling and store the results in f_out.\n\n\n\n\n\nRandom.rand!(\n    [rng::Random.AbstractRNG]\n    PP::AbstractArray{<:GuidProp},\n    XX, WW, v::Val{:ll}, y1=zero(PP[1]);\n    Wnr=Wiener()\n)\n\nSample a trajectory started from y1 over multiple intervals for guided proposals PP that correspond to consecutive intervals. Use containers XX° and WW° to save the results. Compute log-likelihood (path contribution AND end-points contribution) along the way.\n\n\n\n\n\nRandom.rand!(\n    [rng::Random.AbstractRNG]\n    PP::AbstractArray{<:GuidProp},\n    XX°, WW°, WW, ρρ, v::Val{:ll}, y1=zero(PP[1]);\n    Wnr=Wiener()\n)\n\nSample a trajectory started from y1 over multiple intervals for guided proposals PP that correspond to consecutive intervals. Use containers XX° and WW° to save the results. Use a preconditioned Crank-Nicolson scheme with memory parameters ρρ (one for each interval) and a previously sampled Wiener noise WW. Compute log-likelihood (path contribution AND end-points contribution) along the way.\n\n\n\n\n\n","category":"function"},{"location":"manual/guid_prop/#Sampling-a-single-trajectory-1","page":"Guided proposals","title":"Sampling a single trajectory","text":"","category":"section"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"To sample a single trajectory and initialize appropriate containers in the background call rand. Note that rand returns two containers (one for the underlying process: X and another for the Wiener process: W) and a flag for sampling Wiener process Wnr. X, W and Wnr may then be used with rand! for re-sampling without having to allocate any additional memory.","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"tip: Running example—Lotka-Volterra model—sampling a single path\nx0 = @SVector [2.0, 0.25]\nX, W, Wnr = rand(P, x0)\n\nplot(X, Val(:x_vs_y))\nscatter!([y1[1]],[y1[2]], markersize=8, label=\"starting point\")\nscatter!([vT[1]],[vT[2]], marker=:diamond, markersize=8, label=\"conditioned-on point\")(Image: lotka_volterra_single_gp)","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"Alternatively, you may choose to be more explicit: initialize the containers yourself and then call rand!. Note however that if the diffusion's state space is not RR^d you might need to keep re-sampling to make sure the conditions are satisfied.","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"# initialize containers\nX, W = trajectory(P)\n# sample the process\nsuccess = false\nwhile !success\n    success, _ = rand!(P, X, W, x0; Wnr=Wiener())\nend","category":"page"},{"location":"manual/guid_prop/#single_obs_multiple_trajectories-1","page":"Guided proposals","title":"Sampling multiple trajectories","text":"","category":"section"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"Of course, sampling a single trajectory of a guided proposal is usually not the end-goal. We are instead interested in sampling from the target law. To this end we need to not only sample paths, but also compute their log-likelihoods. This can be done in three ways.","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"First, you may simply call loglikhd after the path has been sampled to compute the log-likelihood for it\nSecond, just as in DiffusionDefinition.jl rand and rand! accept a named argument f which computes path functionals when sampling. A function that computes the log-likelihood may be passed there.\nThird—a preferable method—you may call versions of rand! that have optimized versions of log-likelihood computations implemented for them.","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"success, ll = rand!(P, X, W, Val(:ll), x0; Wnr=Wiener())","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"warning: Warning\nll returned by rand! is not exactly log-likelihood for the path XX and one needs to be careful what is the meaning of it. Consult the section on log-likelihoods to find out more.","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"With these functions we may very easily perform smoothing to obtain samples under the target law:","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"function simple_smoothing(P, y1)\n\tX, W, Wnr = rand(P, y1)\n\tX°, W° = trajectory(P)\n\n\tll = loglikhd(P, X)\n\tpaths = []\n\n\tfor i in 1:10^4\n\t\t_, ll° = rand!(P, X°, W°, Val(:ll), y1; Wnr=Wnr)\n\t\tif rand() < exp(ll°-ll)\n\t\t\tX, W, X°, W° = X°, W°, X, W\n\t\t\tll = ll°\n\t\tend\n\t\ti % 400 == 0 && append!(paths, [deepcopy(X)])\n\tend\n\tpaths\nend\npaths = simple_smoothing(P, y1)","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"which results in","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"using Plots, Colors\ncm = colormap(\"RdBu\")\nkwargs = (alpha=0.3, label=\"\")\np = plot(paths[1], Val(:x_vs_y); color=cm[1], kwargs...)\nfor (i,x) in enumerate(paths[2:end])\n\tplot!(p, x, Val(:x_vs_y); color=cm[4*i], kwargs...)\nend\ndisplay(p)","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"(Image: simple_smoothing)","category":"page"},{"location":"manual/guid_prop/#Preconditioned-Crank–Nicolson-scheme-1","page":"Guided proposals","title":"Preconditioned Crank–Nicolson scheme","text":"","category":"section"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"To use the Crank–Nicolson scheme pass additional parameters W (the previously accepted Wiener noise) and ρ (the memory parameter of the preconditioned Crank–Nicolson scheme to a rand! function):","category":"page"},{"location":"manual/guid_prop/#","page":"Guided proposals","title":"Guided proposals","text":"X°, W° = trajectory(P)\nρ = 0.7\nsuccess, ll° = rand!(P, X°, W°, W, ρ, Val(:ll), y1; Wnr=Wnr)","category":"page"},{"location":"manual/bffg/#Backward-filtering-forward-guiding-algorithm-1","page":"BFFG algorithm","title":"Backward filtering-forward guiding algorithm","text":"","category":"section"},{"location":"manual/bffg/#","page":"BFFG algorithm","title":"BFFG algorithm","text":"","category":"page"},{"location":"manual/bffg/#","page":"BFFG algorithm","title":"BFFG algorithm","text":"Backward filtering-forward guiding algorithm is a computational framework for sampling conditioned diffusions, it has been described in detail in this paper and it is what happens behind the scenes of GuidedProposals.jl.","category":"page"},{"location":"manual/bffg/#","page":"BFFG algorithm","title":"BFFG algorithm","text":"Briefly, it comprises of two passes, that—if repeated many times—may result in a smoothing or inference algorithms. The two steps are:","category":"page"},{"location":"manual/bffg/#","page":"BFFG algorithm","title":"BFFG algorithm","text":"backward filtering &\nforward guiding.","category":"page"},{"location":"manual/bffg/#Backward-filtering-1","page":"BFFG algorithm","title":"Backward filtering","text":"","category":"section"},{"location":"manual/bffg/#","page":"BFFG algorithm","title":"BFFG algorithm","text":"","category":"page"},{"location":"manual/bffg/#","page":"BFFG algorithm","title":"BFFG algorithm","text":"Backward filtering is a technical term for propagating the information about the observations (that lie in the future) back into the parts of the interval that precede them (and on which the diffusion is defined). It is simply the process of computing the guiding term. It is done implicitly every time GuidProp is instantiated. Additionally, after parameters change it may also be done explicitly by calling recompute_guiding_term! or its alias","category":"page"},{"location":"manual/bffg/#","page":"BFFG algorithm","title":"BFFG algorithm","text":"backward_filter!","category":"page"},{"location":"manual/bffg/#GuidedProposals.backward_filter!","page":"BFFG algorithm","title":"GuidedProposals.backward_filter!","text":"alias to recompute_guiding_term!\n\n\n\n\n\n","category":"function"},{"location":"manual/bffg/#","page":"BFFG algorithm","title":"BFFG algorithm","text":"see the section on reparameterizations for more details.","category":"page"},{"location":"manual/bffg/#Forward-guiding-1","page":"BFFG algorithm","title":"Forward guiding","text":"","category":"section"},{"location":"manual/bffg/#","page":"BFFG algorithm","title":"BFFG algorithm","text":"","category":"page"},{"location":"manual/bffg/#","page":"BFFG algorithm","title":"BFFG algorithm","text":"Forward guiding is a technical term for sampling guiding proposals. It is encapsulated by various rand, rand! and solve_and_ll! routines. You may also call","category":"page"},{"location":"manual/bffg/#","page":"BFFG algorithm","title":"BFFG algorithm","text":"GuidedProposals.forward_guide!","category":"page"},{"location":"manual/bffg/#GuidedProposals.forward_guide!","page":"BFFG algorithm","title":"GuidedProposals.forward_guide!","text":"alias to rand!\n\n\n\n\n\n","category":"function"},{"location":"manual/bffg/#","page":"BFFG algorithm","title":"BFFG algorithm","text":"See sections Defining guided proposals and Guided proposals with multiple observations for more details about sampling.","category":"page"},{"location":"manual/bffg/#","page":"BFFG algorithm","title":"BFFG algorithm","text":"tip: Tip\nCheck-out the how-to guides and tutorials on smoothing and inference to see the BFFG algorithm in action.","category":"page"},{"location":"#GuidedProposals.jl-1","page":"Home","title":"GuidedProposals.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Efficient and user-friendly guided proposals in Julia. Introduced in M Schauer, F van der Meulen and H van Zanten Guided proposals for simulating multi-dimensional diffusion bridges (2017) arXiv.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Provides methods for efficient sampling of conditioned diffusions.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Depending on your intended use of this package you might choose to start at different places:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"For a quick overview of GuidedProposals.jl's main functionality see Get started.\nFor a systematic introduction to all functionality introduced in this package see the Manual\nFor a didactic introduction to problems that can be solved using GuidedProposals.jl see the Tutorials\nIf you have a problem that you think can be addressed with this package, then check out the How-to guides to see if the answer is already there.","category":"page"}]
}
